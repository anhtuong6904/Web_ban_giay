const sql = require('mssql');

console.log('üîç Comprehensive SQL Server Connection Test');
console.log('==========================================\n');

// Test 1: Windows Authentication
async function testWindowsAuth() {
  console.log('ü™ü Test 1: Windows Authentication');
  const config = {
    server: 'DESKTOP-3UR600M',
    database: 'shopgiay',
    port: 1433,
    options: {
      encrypt: false,
      trustServerCertificate: true,
      enableArithAbort: true,
      integratedSecurity: true
    }
  };

  try {
    await sql.connect(config);
    console.log('‚úÖ Windows Authentication: SUCCESS');
    await sql.close();
    return true;
  } catch (err) {
    console.log('‚ùå Windows Authentication: FAILED');
    console.log('   Error:', err.message);
    return false;
  }
}

// Test 2: SQL Authentication v·ªõi nhi·ªÅu password
async function testSQLAuth() {
  console.log('\nüîë Test 2: SQL Authentication v·ªõi nhi·ªÅu password');
  
  const passwords = [
    '', 'sa', '123456', 'password', 'admin', '123', 'sa123', '123sa',
    'root', 'master', 'sql', 'server', 'sa123456', '123456sa',
    'administrator', 'saadmin', 'sa1234', '1234sa', 'sa2024', '2024sa'
  ];

  for (const password of passwords) {
    const config = {
      user: 'sa',
      password: password,
      server: 'DESKTOP-3UR600M',
      database: 'shopgiay',
      port: 1433,
      options: {
        encrypt: false,
        trustServerCertificate: true,
        enableArithAbort: true
      }
    };

    try {
      await sql.connect(config);
      console.log(`‚úÖ SQL Auth SUCCESS with password: "${password}"`);
      await sql.close();
      return password;
    } catch (err) {
      if (err.code === 'ELOGIN') {
        console.log(`‚ùå Login failed: "${password}"`);
      } else {
        console.log(`‚ö†Ô∏è  Other error with "${password}":`, err.message);
      }
    }
  }
  
  console.log('‚ùå Kh√¥ng t√¨m th·∫•y password ƒë√∫ng!');
  return null;
}

// Test 3: Ki·ªÉm tra server c√≥ ho·∫°t ƒë·ªông kh√¥ng
async function testServerConnection() {
  console.log('\nüåê Test 3: Ki·ªÉm tra server connection (kh√¥ng c·∫ßn database)');
  
  const config = {
    user: 'sa',
    password: '123456',
    server: 'DESKTOP-3UR600M',
    port: 1433,
    options: {
      encrypt: false,
      trustServerCertificate: true,
      enableArithAbort: true
    }
  };

  try {
    await sql.connect(config);
    console.log('‚úÖ Server connection: SUCCESS (kh√¥ng c·∫ßn database)');
    await sql.close();
    return true;
  } catch (err) {
    console.log('‚ùå Server connection: FAILED');
    console.log('   Error:', err.message);
    return false;
  }
}

// Test 4: Th·ª≠ v·ªõi server name kh√°c
async function testAlternativeServerNames() {
  console.log('\nüîÑ Test 4: Th·ª≠ v·ªõi server name kh√°c');
  
  const serverNames = [
    'localhost',
    '127.0.0.1',
    'DESKTOP-3UR600M\\SQLEXPRESS',
    'DESKTOP-3UR600M\\MSSQLSERVER',
    'DESKTOP-3UR600M,1433'
  ];

  for (const server of serverNames) {
    console.log(`   Testing server: ${server}`);
    
    const config = {
      user: 'sa',
      password: '123456',
      server: server,
      database: 'shopgiay',
      port: 1433,
      options: {
        encrypt: false,
        trustServerCertificate: true,
        enableArithAbort: true
      }
    };

    try {
      await sql.connect(config);
      console.log(`‚úÖ SUCCESS with server: ${server}`);
      await sql.close();
      return server;
    } catch (err) {
      console.log(`‚ùå FAILED with server: ${server}`);
    }
  }
  
  console.log('‚ùå Kh√¥ng t√¨m th·∫•y server name ƒë√∫ng!');
  return null;
}

// Ch·∫°y t·∫•t c·∫£ tests
async function runAllTests() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test to√†n di·ªán...\n');
  
  const results = {
    windowsAuth: await testWindowsAuth(),
    sqlAuth: await testSQLAuth(),
    serverConnection: await testServerConnection(),
    alternativeServer: await testAlternativeServerNames()
  };

  console.log('\nüìä K·∫æT QU·∫¢ T·ªîNG H·ª¢P:');
  console.log('========================');
  console.log(`Windows Auth: ${results.windowsAuth ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  console.log(`SQL Auth: ${results.sqlAuth ? `‚úÖ SUCCESS (password: "${results.sqlAuth}")` : '‚ùå FAILED'}`);
  console.log(`Server Connection: ${results.serverConnection ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  console.log(`Alternative Server: ${results.alternativeServer ? `‚úÖ SUCCESS (${results.alternativeServer})` : '‚ùå FAILED'}`);

  if (results.sqlAuth) {
    console.log(`\nüéâ GI·∫¢I PH√ÅP: S·ª≠ d·ª•ng password "${results.sqlAuth}"`);
  } else if (results.alternativeServer) {
    console.log(`\nüéâ GI·∫¢I PH√ÅP: S·ª≠ d·ª•ng server "${results.alternativeServer}"`);
  } else {
    console.log('\n‚ùå C·∫¶N KI·ªÇM TRA SQL SERVER CONFIGURATION');
    console.log('   - Ki·ªÉm tra SQL Server c√≥ ch·∫°y kh√¥ng');
    console.log('   - Ki·ªÉm tra port 1433 c√≥ m·ªü kh√¥ng');
    console.log('   - Ki·ªÉm tra Windows Firewall');
    console.log('   - Reset password user sa');
  }
}

runAllTests().catch(console.error); 